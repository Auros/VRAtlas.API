using FluentAssertions;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using System.Net;
using System.Net.Http.Json;

namespace VRAtlas.Tests.Integration;

public class RoleTests : IClassFixture<AtlasFactory>
{
    private readonly AtlasFactory _atlasFactory;

    public RoleTests(AtlasFactory atlasFactory)
    {
        _atlasFactory = atlasFactory;
    }

    [Fact]
    public async Task TestDefaultPermission_AreAssigned()
    {
        await using var scope = _atlasFactory.Services.CreateAsyncScope();
        var atlasContext = scope.ServiceProvider.GetRequiredService<AtlasContext>();

        var role = await atlasContext.Roles.FirstOrDefaultAsync(r => r.Name == AtlasConstants.DefaultRoleName);

        role.Should().NotBeNull();
        role!.Permissions.Should().NotBeEmpty();
        role.Permissions.Should().Contain("tests.default.example");
    }

    [Fact]
    public async Task TestUserPermissionService_GetPermissions()
    {
        await using var scope = _atlasFactory.Services.CreateAsyncScope();
        var userPermissionService = scope.ServiceProvider.GetRequiredService<IUserPermissionService>();

        var permissions = await userPermissionService.GetUserPermissions(TestExamples.Bismuth.Id);

        permissions.Should().NotBeEmpty();
        permissions.Should().Contain("tests.creator.example"); // Inherit from creator role
        permissions.Should().Contain("tests.default.example"); // Inherit from default role
    }

    [Fact]
    public async Task TestGetRoles_All()
    {
        using var atlas = _atlasFactory.CreateDefaultClient();

        var response = await atlas.GetAsync("/roles");
        response.StatusCode.Should().Be(HttpStatusCode.OK);

        var body = await response.Content.ReadFromJsonAsync<Role[]>();

        // Check that the autogenerated roles are returned
        body.Should().Contain(o => o.Name == AtlasConstants.AdministratorRoleName);
        body.Should().Contain(o => o.Name == AtlasConstants.DefaultRoleName);

        // And now check that the test data roles are returned
        body.Should().Contain(TestExamples.Roles);
    }
}